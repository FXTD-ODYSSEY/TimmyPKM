{
    "author": "Timmy Liang",
    "core-version": ">=5.1.9",
    "description": "bidirectional linking",
    "documentation": "https://giffmex.org/stroll/stroll.html",
    "list": "readme",
    "plugin-type": "plugin",
    "source": "https://github.com/tobibeer/tw5-appear",
    "title": "$:/giffmex/stroll",
    "type": "application/json",
    "version": "0.0.1",
    "tiddlers": {
        "$:/config/EditorTypeMappings/text/vnd.tiddlywiki": {
            "text": "comptext",
            "title": "$:/config/EditorTypeMappings/text/vnd.tiddlywiki",
            "tags": "$:/giffmex/stroll $:/giffmex/blinks",
            "modified": "20200603121638626",
            "created": "20200510024843460"
        },
        "$:/plugins/danielo515/ContextPlugin/widgets/context.js": {
            "text": "/*\\\\\ntitle: $:/core/modules/widgets/danielo/context-widget.js\ntype: application/javascript\nmodule-type: widget\n\nEdit-text widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tc: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\nvar contextWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\ncontextWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\ncontextWidget.prototype.render = function(parent,nextSibling) {\n   // Save the parent dom node\n\tthis.parentDomNode = parent;\n\t// Compute our attributes\n\tthis.computeAttributes();\n\t// Execute our logic\n\tthis.execute();\n    \n  if(this.term && this.term.length>3){\n     \n      this.createRegexp();\n      var matches = this.executeRegexp();\n\t  if(matches.length > 0){ \n        this.domNode = this.document.createElement(this.element);\n        this.domNode.className=\"tw-context\";\n        this.composeResults( matches ); //this appends to domNode        \n      \t// Insert element\n      \tparent.insertBefore(this.domNode,nextSibling);\n      \tthis.renderChildren(this.domNode,null);\n\t  \tthis.domNodes.push(this.domNode);\n      }\n  }\n\t\n};\n\n/*\nCompute the internal state of the widget\n*/\ncontextWidget.prototype.execute = function() {\n\t// Get the parameters from the attributes\n    this.matchedClass = this.getAttribute(\"matchClass\",\"matched\");\n\tthis.tiddler = this.getAttribute( \"tiddler\",this.getVariable(\"currentTiddler\") );\n    this.term =  this.getAttribute(\"term\",this.getAttribute(\"searchTerm\"));\n\tthis.contextLength = this.getAttribute(\"length\",50);\n    this.before = this.getAttribute(\"before\",this.contextLength);\n    this.after = this.getAttribute(\"after\",this.contextLength);\n    this.maxMatches = this.getAttribute(\"maxMatches\",10);\n    this.element = this.getAttribute(\"element\",\"pre\");\n\tthis.makeChildWidgets();\n};\n\n  /*Create the regular expression*/\ncontextWidget.prototype.createRegexp = function()\n{\n  var regString = \"(\\\\w+[\\\\s\\\\S]{0,#before#})?(#term#)([\\\\s\\\\S]{0,#after#}\\\\w+)?\";\n\n  var regString = regString.replace(\"#before#\",this.before).replace(\"#term#\", $tw.utils.escapeRegExp(this.term) ) .replace(\"#after#\",this.after);\n  this.regexp = new RegExp(regString,\"ig\");\n  //console.log(regString);\n};\n/*\nexecute the regular expresion\n*/\ncontextWidget.prototype.executeRegexp = function()\n{\n  var text = this.wiki.getTiddlerText(this.tiddler), match,results = new Array();\n  while( (match = this.regexp.exec( text ) ) && (results.length < this.maxMatches) )\n      { results.push(match) }\n  //console.log(\"matches\",results);\n  return results;\n};\n\n/*\ncompose the results\nmatches : array of match objects from regular expression execute\n*/\ncontextWidget.prototype.composeResults = function(matches){\n var result=[], self=this, node = this.domNode,\n dots = textNode(\"...\\n\"),\n span = matchedNode( this.term );\n\n  for(var i=0; i < matches.length; i++){\n   processMatch( matches[i] );\n }\n  \n  function processMatch(match){\n    if( match.index !== 0) node.appendChild( dots.cloneNode(true) );\n    for( var i=1;i<match.length;i++ ) {//match[0] full matched text (all groups together)\n      if( match[i] ) {\n        if ( match[i].toLowerCase() == self.term.toLowerCase() ) \n          node.appendChild( match[i] == self.term ? span.cloneNode(true) : matchedNode( match[i] ) )\n          else\n            node.appendChild( textNode( match[i]) )\n      }\n    }\n    if( match.index + match[0].length < match.input.length) node.appendChild( dots.cloneNode(true) );\n  }\n  \n  function textNode(text){ return self.document.createTextNode(text) }\n  function matchedNode(text) { \n    var node = self.document.createElement(\"span\"); node.appendChild( textNode(text) );  node.className = self.matchedClass;\n    return node }\n  \n};\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\ncontextWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes.tiddler || changedAttributes.term || changedAttributes.length || changedAttributes.matchedClass) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n    return this.refreshChildren(changedTiddlers);\n};\n\nexports.context = contextWidget;\n\n})();",
            "type": "application/javascript",
            "title": "$:/plugins/danielo515/ContextPlugin/widgets/context.js",
            "tags": "$:/giffmex/stroll $:/giffmex/blinks",
            "revision": "0",
            "module-type": "widget",
            "modifier": "danielo",
            "modified": "20200521150809407",
            "creator": "danielo",
            "created": "20140418153435777",
            "bag": "default"
        },
        "$:/plugins/danielo515/ContextPlugin/Caption": {
            "text": "Context search",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/plugins/danielo515/ContextPlugin/Caption",
            "tags": "$:/giffmex/stroll $:/giffmex/blinks",
            "revision": "0",
            "modified": "20200521150938691",
            "created": "20140530174219263",
            "bag": "default"
        },
        "$:/.giffmex/.Stylesheet4Stroll": {
            "text": "/*BOXES*/\n\nhtml body.tc-body .bluebox {display:block;background-color:#eef;padding:5px;padding-left:20px;padding-top:10px;margin-top:5px;margin-bottom:5px;width:95%;color:#000;}\n\nhtml body.tc-body .graybox {display:block;background-color:#eee;padding:5px;padding-left:20px;padding-top:10px;margin-top:5px;margin-bottom:5px;width:95%;color:#000;}\n\nbody p {<<colour foreground>>;}\ncode {color: #b0a;background-color:#eee;}\n\n/*TIGHT NOTES*/\n\nhtml body.tc-body h1, html body.tc-body h2, html body.tc-body h3, html body.tc-body h4 { margin-top: 0.3em; margin-bottom: 0.3em; }\n\n/*FONT SUBTITLES*/\n\n.serif {font-family: 'Arial', sans-serif; color: <<colour tiddler-editor-border>>font-size:10pt;}\n\nhtml body.tc-body .serif a.tc-tiddlylink-external {font-family: 'Arial', sans-serif;font-size:12pt; line-height:normal;font-weight:normal;color:#666;}\n\n/*FONT STUFF (colors)*/\n\nhtml body.tc-body .lightgraybk {background:#eee;padding:1px 4px px 4px;margin-bottom:2px;font-family:'Arial', sans-serif;}\n\n.red {color:red;}\nhtml body.tc-body .blue a {color:blue;}\n\n/*FONT STUFF SOURCES*/\n\nhtml body.tc-body .source {color:#777;font-size:10pt;}\n\n/*ICON COLORS*/\n\nhtml body.tc-body .tc-image-edit-button {stroke: white;fill:#555;}\nhtml body.tc-body .tc-image-chevron-up {stroke: white;fill:#ccc;}\nhtml body.tc-body .tc-image-chevron-down {stroke: white;fill:#ccc;}\nhtml body.tc-body .tc-image-fold-button {stroke: white;fill:#ccc;}\nhtml body.tc-body .tc-image-close-button {stroke: white;fill:#555;}\nhtml body.tc-body .tc-image-unfold-button {stroke: white;fill:#ccc;}\nhtml body.tc-body .tc-image-preview-open {stroke: white;fill:#f29;font-size:150%;}\nhtml body.tc-body .tc-image-delete-button {stroke: white;fill:#ff2222;}\nhtml body.tc-body .tc-image-cancel-button {stroke: white;fill:#ffdd55;}\nhtml body.tc-body .tc-image-done-button {stroke: white;fill:#094;}\n\n/*INDENTING*/\n\nhtml body.tc-body .indent1 {margin-left:1.5em;display:block;}\n\n/*LINKS*/\n\nhtml body.tc-body a.tc-tiddlylink {text-decoration: none;font-style: normal;font-weight: normal;} \nhtml body.tc-body a.tc-tiddlylink-external {text-decoration: none;font-weight: normal;}\nhtml body.tc-body a.tc-tiddlylink-visited {text-decoration: none;font-weight: normal;}\n\nhtml body.tc-body .source a.tc-tiddlylink-external {font-weight: normal;font-size:10pt;}\n\n/*LISTS BASIC*/\n\nhtml body.tc-body ul li {color: <<colour foreground>>;}\nhtml body.tc-body ol li {color:<<colour foreground>>;}\n\n/*TIDDLER TITLES*/\n\n.tc-tiddler-missing .tc-title { font-style: normal; font-weight: bold; }\n\n/*VIEWTEMPLATE FONT SIZE*/\n\nhtml body.tc-body .viewtemplatebigtext {font-size:110%;}\n\n/*HIDE SECTIONS FOR PRINTING*/\n\n@media print {#tc-page-background {display: none ! important;}} \n@media print {.tc-tags-wrapper {display: none ! important;}} \n\n @media print { body.tc-body {background-color: transparent;}}\n @media print {.tc-image-chevron-up {display: none ! important;}} \n @media print {.tc-image-chevron-down {display: none ! important;}} \n @media print {button.sidebar-toggle {display: none ! important;}} \n@media print {.hideprint {display: none ! important;}} \n@media print {.tc-btn-invisible {display: none ! important;}} \n\n@media print {\n\n.story-river {\nmargin: 0;\npadding: 0;\n}\n\nhtml body.tc-body .tc-tiddler-frame {\nmargin: 0;\nborder-bottom: 1px solid #fff;\npadding: 5px;}\n\nhtml body.tc-body a.tc-tiddlylink-external:hover {\nborder: 1px solid <<colour tiddler-border>>;\n}\n\nhtml body.tc-body .tc-tiddler-info {\npadding: 14px 42px 14px 42px;\nbackground-color: <<colour tiddler-info-background>>;}\n\n}\n",
            "type": "text/css",
            "title": "$:/.giffmex/.Stylesheet4Stroll",
            "tags": "$:/tags/Stylesheet $:/giffmex/stroll $:/giffmex/blinks",
            "modified": "20200714164402812",
            "created": "20191010123116672"
        },
        "$:/.giffmex/sidebar/tabs/strollcontrols": {
            "text": "\\define tagreset() \n<$list filter=\"[tag[$:/giffmex/refs]sort[created]] -[[$(currentTiddler)$]]\" variable=\"removeme\">\n<$action-listops  $tiddler=<<removeme>> $tags=\"+[remove[$:/tags/ViewTemplate]]\"/>\n</$list>\n<$action-deletefield dummy/>\n\\end\n\n''Choose how to view references:''\n\n<$list filter=\"[tag[$:/giffmex/refs]sort[caption]]\">\n<$list filter=\"[all[current]tag[$:/tags/ViewTemplate]]\">\n<$checkbox field=dummy checked=\"yes\" unchecked=\"yes\" default=\"yes\"></$checkbox>\n<$view field=\"caption\"/><br/> \n</$list>\n<$list filter=\"[all[current]!tag[$:/tags/ViewTemplate]]\">\n<$checkbox tag=\"$:/tags/ViewTemplate\" xinvertTag=\"yes\" checkactions=<<tagreset>>/> <$view field=\"caption\"/><br/> \n</$list>\n</$list>\n\n{{Hint for Muffin tutorial}}\n\n<br>Note that the gray boxes in the context and transclude options are links to their respective tiddlers.",
            "title": "$:/.giffmex/sidebar/tabs/strollcontrols",
            "tags": "$:/tags/SideBar $:/giffmex/stroll $:/giffmex/blinks",
            "modified": "20200521151510697",
            "created": "20200129233103456",
            "caption": "{{$:/core/images/preview-open}}"
        },
        "$:/.giffmex/ViewTemplate/refscontext": {
            "text": "<span class=\"viewtemplatebigtext\">\n\n<$reveal type=\"nomatch\" stateTitle=<<folded-state>> text=\"hide\" tag=\"div\" retain=\"yes\" animate=\"yes\">\n\n<hr>\n\n<$vars searchme=<<currentTiddler>> searchspx={{{ [<currentTiddler>escaperegexp[]]}}} >\n\n<$list filter=\"[!is[system]all[current]backlinks[]!tag[outlines]!tag[hide]sort[title]] -[is[current]]\"><$link><$view field=\"title\"/></$link><span class=\"indent1\"><$link><span class=\"graybox\"><$context term=<<searchme>> /></span></$link></span></$list>\n</$vars>\n\n</$reveal>\n\n</span>",
            "title": "$:/.giffmex/ViewTemplate/refscontext",
            "tags": "$:/giffmex/blinks $:/giffmex/refs $:/giffmex/stroll",
            "modified": "20201231125546995",
            "created": "20200102141715979",
            "caption": "Highlights in context"
        },
        "$:/.giffmex/ViewTemplate/refshidden": {
            "text": "",
            "type": "application/x-tiddler",
            "title": "$:/.giffmex/ViewTemplate/refshidden",
            "tags": "$:/giffmex/blinks $:/giffmex/refs $:/giffmex/stroll",
            "modifier": "Quick Config",
            "modified": "20201231112642442",
            "creator": "Quick Config",
            "created": "20200502165303215",
            "caption": "Hidden"
        },
        "$:/.giffmex/ViewTemplate/refslinks": {
            "text": "<span class=\"viewtemplatebigtext\">\n\n<$reveal type=\"nomatch\" stateTitle=<<folded-state>> text=\"hide\" tag=\"div\" retain=\"yes\" animate=\"yes\">\n\n<hr>\n\n<$vars searchme=<<currentTiddler>> searchspx={{{ [<currentTiddler>escaperegexp[]]}}} >\n\n<$list filter=\"[!is[system]all[current]backlinks[]!tag[hide]sort[title]] -[is[current]]\"><$link><$view field=\"title\" /></$link><br></$list>\n</$vars>\n\n</$reveal>\n\n</span>",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/.giffmex/ViewTemplate/refslinks",
            "tags": "$:/giffmex/blinks $:/giffmex/refs $:/giffmex/stroll $:/tags/ViewTemplate",
            "revision": "0",
            "modified": "20201231133229356",
            "created": "20200126143031898",
            "caption": "Simple links",
            "bag": "default"
        },
        "$:/.giffmex/ViewTemplate/refstranscludeclean": {
            "text": "<span class=\"viewtemplatebigtext\">\n\n<$reveal type=\"nomatch\" stateTitle=<<folded-state>> text=\"hide\" tag=\"div\" retain=\"yes\" animate=\"yes\">\n\n<hr>\n\n<$list filter=\"[!is[system]all[current]backlinks[]!tag[hide]!tag[outlines]sort[title]] -[is[current]]\"><$link><$view field=\"title\"/></$link><span class=\"indent1\"><$link><span class=\"graybox\"><$transclude field=\"text\" mode=\"block\" /></span></$link></span></$list>\n\n</$reveal>\n\n</span>",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/.giffmex/ViewTemplate/refstranscludeclean",
            "tags": "$:/giffmex/blinks $:/giffmex/refs $:/giffmex/stroll",
            "revision": "0",
            "modified": "20201231133223498",
            "created": "20200126142157739",
            "caption": "Full text",
            "bag": "default"
        },
        "$:/.giffmex/ViewTemplate/refstranscludecollapse": {
            "text": "<span class=\"viewtemplatebigtext\">\n\n<$reveal type=\"nomatch\" stateTitle=<<folded-state>> text=\"hide\" tag=\"div\" retain=\"yes\" animate=\"yes\">\n\n<hr>\n\n<$list filter=\"[!is[system]all[current]backlinks[]!tag[hide]!tag[outlines]sort[title]] -[is[current]]\"><$link><$view field=\"title\"/></$link>\n<$reveal type=\"nomatch\" stateTitle=\"$:/.giffmex/TiddlyBlinkFoldData\" stateIndex=<<currentTiddler>> text=\"show\">\n<$button class=<<tv-config-toolbar-class>> setTitle=\"$:/.giffmex/TiddlyBlinkFoldData\" setIndex=<<currentTiddler>> setTo=\"show\">{{$:/core/images/unfold-button}}</$button><br/>\n</$reveal>\n<$reveal type=\"match\" stateTitle=\"$:/.giffmex/TiddlyBlinkFoldData\" stateIndex=<<currentTiddler>> text=\"show\">\n<$button class=<<tv-config-toolbar-class>> setTitle=\"$:/.giffmex/TiddlyBlinkFoldData\" setIndex=<<currentTiddler>> setTo=\"hide\">{{$:/core/images/fold-button}}</$button>\n<span class=\"indent1\">\n<$link><span class=\"graybox\">\n\n<$transclude field=\"text\" mode=\"block\" /></span></$link></span>\n</$reveal>\n</$list>\n\n</$reveal>\n\n</span>\n",
            "title": "$:/.giffmex/ViewTemplate/refstranscludecollapse",
            "tags": "$:/giffmex/blinks $:/giffmex/refs $:/giffmex/stroll",
            "modified": "20201231133222598",
            "created": "20200126142157739",
            "caption": "Full text under sliders"
        },
        "$:/config/RelinkOnRename": {
            "text": "yes",
            "type": "text/vnd.tiddlywiki",
            "title": "$:/config/RelinkOnRename",
            "tags": "$:/giffmex/stroll $:/giffmex/blinks",
            "revision": "0",
            "modified": "20200521150810088",
            "created": "20200106214031452",
            "bag": "default"
        },
        "$:/plugins/danielo515/context/css": {
            "text": ".matched {background-color:#ffc;}\n.tw-context {\n  border:0px solid #eee;background-color:#eee;\n  word-break: break-all; word-wrap: break-word;}",
            "type": "text/css",
            "title": "$:/plugins/danielo515/context/css",
            "tags": "$:/tags/Stylesheet $:/giffmex/stroll $:/giffmex/blinks",
            "revision": "0",
            "modified": "20200521150810414",
            "created": "20200126141319129",
            "bag": "default"
        },
        "$:/plugins/danielo515/ContextPlugin": {
            "text": "{\n    \"tiddlers\": {\n        \"$:/plugins/danielo515/ContextPlugin/widgets/context.js\": {\n            \"created\": \"20140418153435777\",\n            \"creator\": \"danielo\",\n            \"modified\": \"20140530231943517\",\n            \"modifier\": \"danielo\",\n            \"module-type\": \"widget\",\n            \"title\": \"$:/plugins/danielo515/ContextPlugin/widgets/context.js\",\n            \"type\": \"application/javascript\",\n            \"text\": \"/*\\\\\\\\\\ntitle: $:/core/modules/widgets/danielo/context-widget.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nEdit-text widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\nvar contextWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\ncontextWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\ncontextWidget.prototype.render = function(parent,nextSibling) {\\n   // Save the parent dom node\\n\\tthis.parentDomNode = parent;\\n\\t// Compute our attributes\\n\\tthis.computeAttributes();\\n\\t// Execute our logic\\n\\tthis.execute();\\n    \\n  if(this.term && this.term.length>3){\\n     \\n      this.createRegexp();\\n      var matches = this.executeRegexp();\\n\\t  if(matches.length > 0){ \\n        this.domNode = this.document.createElement(this.element);\\n        this.domNode.className=\\\"tw-context\\\";\\n        this.composeResults( matches ); //this appends to domNode        \\n      \\t// Insert element\\n      \\tparent.insertBefore(this.domNode,nextSibling);\\n      \\tthis.renderChildren(this.domNode,null);\\n\\t  \\tthis.domNodes.push(this.domNode);\\n      }\\n  }\\n\\t\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\ncontextWidget.prototype.execute = function() {\\n\\t// Get the parameters from the attributes\\n    this.matchedClass = this.getAttribute(\\\"matchClass\\\",\\\"matched\\\");\\n\\tthis.tiddler = this.getAttribute( \\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\") );\\n    this.term =  this.getAttribute(\\\"term\\\",this.getAttribute(\\\"searchTerm\\\"));\\n\\tthis.contextLength = this.getAttribute(\\\"length\\\",50);\\n    this.before = this.getAttribute(\\\"before\\\",this.contextLength);\\n    this.after = this.getAttribute(\\\"after\\\",this.contextLength);\\n    this.maxMatches = this.getAttribute(\\\"maxMatches\\\",10);\\n    this.element = this.getAttribute(\\\"element\\\",\\\"pre\\\");\\n\\tthis.makeChildWidgets();\\n};\\n\\n  /*Create the regular expression*/\\ncontextWidget.prototype.createRegexp = function()\\n{\\n  var regString = \\\"(\\\\\\\\w+[\\\\\\\\s\\\\\\\\S]{0,#before#})?(#term#)([\\\\\\\\s\\\\\\\\S]{0,#after#}\\\\\\\\w+)?\\\";\\n\\n  var regString = regString.replace(\\\"#before#\\\",this.before).replace(\\\"#term#\\\", $tw.utils.escapeRegExp(this.term) ) .replace(\\\"#after#\\\",this.after);\\n  this.regexp = new RegExp(regString,\\\"ig\\\");\\n  //console.log(regString);\\n};\\n/*\\nexecute the regular expresion\\n*/\\ncontextWidget.prototype.executeRegexp = function()\\n{\\n  var text = this.wiki.getTiddlerText(this.tiddler), match,results = new Array();\\n  while( (match = this.regexp.exec( text ) ) && (results.length < this.maxMatches) )\\n      { results.push(match) }\\n  //console.log(\\\"matches\\\",results);\\n  return results;\\n};\\n\\n/*\\ncompose the results\\nmatches : array of match objects from regular expression execute\\n*/\\ncontextWidget.prototype.composeResults = function(matches){\\n var result=[], self=this, node = this.domNode,\\n dots = textNode(\\\"...\\\\n\\\"),\\n span = matchedNode( this.term );\\n\\n  for(var i=0; i < matches.length; i++){\\n   processMatch( matches[i] );\\n }\\n  \\n  function processMatch(match){\\n    if( match.index !== 0) node.appendChild( dots.cloneNode(true) );\\n    for( var i=1;i<match.length;i++ ) {//match[0] full matched text (all groups together)\\n      if( match[i] ) {\\n        if ( match[i].toLowerCase() == self.term.toLowerCase() ) \\n          node.appendChild( match[i] == self.term ? span.cloneNode(true) : matchedNode( match[i] ) )\\n          else\\n            node.appendChild( textNode( match[i]) )\\n      }\\n    }\\n    if( match.index + match[0].length < match.input.length) node.appendChild( dots.cloneNode(true) );\\n  }\\n  \\n  function textNode(text){ return self.document.createTextNode(text) }\\n  function matchedNode(text) { \\n    var node = self.document.createElement(\\\"span\\\"); node.appendChild( textNode(text) );  node.className = self.matchedClass;\\n    return node }\\n  \\n};\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\ncontextWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.tiddler || changedAttributes.term || changedAttributes.length || changedAttributes.matchedClass) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n    return this.refreshChildren(changedTiddlers);\\n};\\n\\nexports.context = contextWidget;\\n\\n})();\"\n        },\n        \"$:/plugins/danielo515/ContextPlugin/visualizer\": {\n            \"title\": \"$:/plugins/danielo515/ContextPlugin/visualizer\",\n            \"tags\": \"$:/tags/SearchResults\",\n            \"caption\": \"Context\",\n            \"text\": \"<$list filter=\\\"[!is[system]search{$:/temp/search}sort[title]limit[250]]\\\">\\r\\n  {{!!title||$:/core/ui/ListItemTemplate}}\\r\\n  <$context term={{$:/temp/search}} />\\r\\n</$list>\\r\\n\"\n        },\n        \"$:/plugins/danielo515/ContextPlugin/Stylesheet/results\": {\n            \"created\": \"20140529162823729\",\n            \"tags\": \"$:/tags/Stylesheet contextPlugin\",\n            \"title\": \"$:/plugins/danielo515/ContextPlugin/Stylesheet/results\",\n            \"type\": \"text/css\",\n            \"text\": \".matched{background-color:yellow}\\n.tw-context {/*border:1px solid;\\n  /*word-break: break-all; word-wrap: break-word*/}\"\n        },\n        \"$:/plugins/danielo515/ContextPlugin/Caption\": {\n            \"created\": \"20140530174219263\",\n            \"tags\": \"contextPlugin\",\n            \"title\": \"$:/plugins/danielo515/ContextPlugin/Caption\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"Context search\"\n        },\n        \"Context Search\": {\n            \"caption\": \"{{$:/plugins/danielo515/ContextPlugin/Caption}}\",\n            \"created\": \"20140530173407542\",\n            \"tags\": \"$:/tags/AdvancedSearch\",\n            \"title\": \"Context Search\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"\\\\define lingo-base() $:/language/Search/\\n<$linkcatcher to=\\\"$:/temp/advancedsearch\\\">\\n\\n<<lingo Standard/Hint>>\\n\\n<div class=\\\"tw-search\\\"><$edit-text tiddler=\\\"$:/temp/advancedsearch\\\" type=\\\"search\\\" tag=\\\"input\\\"/><$reveal state=\\\"$:/temp/advancedsearch\\\" type=\\\"nomatch\\\" text=\\\"\\\"> <$link to=\\\"\\\" class=\\\"btn-invisible\\\">{{$:/core/images/close-button}}</$link></$reveal></div>\\n\\n</$linkcatcher>\\n\\n<$reveal state=\\\"$:/temp/advancedsearch\\\" type=\\\"nomatch\\\" text=\\\"\\\">\\n<div class=\\\"tw-search-results\\\">\\n\\n<<lingo Standard/Matches>>\\n\\n<$list filter=\\\"[!is[system]search{$:/temp/advancedsearch}sort[title]limit[250]]\\\">\\n{{!!title||$:/core/ui/ListItemTemplate}}\\n<$context term={{$:/temp/advancedsearch}}/>\\n</$list>\\n\\n</div>\\n\\n</$reveal>\\n\\n<$reveal state=\\\"$:/temp/advancedsearch\\\" type=\\\"match\\\" text=\\\"\\\">\\n\\n</$reveal>\\n\"\n        },\n        \"$:/plugins/danielo515/ContextPlugin/readme\": {\n            \"title\": \"$:/plugins/danielo515/ContextPlugin/readme\",\n            \"text\": \"!Usage\\n\\nAfter installing the plugin you will have a new tab in [[$:/AdvancedSearch]] called [[Context Search]]. If you want this functionality in other places you will have to edit the desired tiddler yourself adding the ''context widget''. For more details about using the widget see the section below.\\n\\n!!Using the widget\\n\\nThe very basic usage of the widget is the following:\\n\\n```\\r\\n<$context term=\\\"lorem\\\"/>\\r\\n```\\r\\nWhich will render as:\\r\\n<$context term=\\\"lorem\\\"/>\\n\\nThe widgets will search inside the current tiddler by default. Because that you see the same content twice here. This example is not very useful. Other more meaningful would be:\\n\\n```\\r\\n<$list filter=\\\"[search{$:/temp/advancedsearch}sort[title]limit[250]]\\\">\\r\\n{{!!title||$:/core/ui/ListItemTemplate}}\\r\\n<$context term={{$:/temp/advancedsearch}}/>\\r\\n</$list>\\r\\n```\\n\\nThat will search for tiddlers containing the text specified in [[$:/temp/advancedsearch]] and will display a link to the matching tiddlers plus a preview of the matching content. Something very similar is used in [[Context Search]]. Below you can find a complete list of parameters and their default values.\\n\\n|! parameter |! description | !default |\\r\\n| term | The term you want to search ||\\r\\n| searchTerm | An alias for the previous one ||\\r\\n| tiddler | The tiddler's name to look into | current tiddler |\\r\\n| length | Number of context characters to show | 50 |\\r\\n| before | Number of characters before the matched term to show | the value of the length parameter |\\r\\n| after | Number of characters after the matched term to show | the value of the length parameter |\\r\\n| maxMatches | maximun number of matched elements to show. Incrementing this can cause several performance issues | 10 |\\r\\n| element | Node element to create. This element will contain the results of the search. If you want to style it its class is `tw-context` | `<pre>` |\\r\\n| matchClass | The css class to assign to the matched terms in the results. This is used to highlight the results | matched |\\n\\n!Customizing the output\\r\\nThere are not many ways to customize the output of this widget. You can specify ''what type of node you want to create'' to wrap the results (div,span...). The default is `<pre>`. This container is created with the class `tw-context` so you can easily apply styles to it. Something similar happens to the ''highlighted'' words. You can specify the name of the class to assign to it and also you can apply styles to that class.\\n\\nA very basic example of customization could be:\\n\\n# Create a tiddler, for example [[$/plugins/danielo515/context/css]]\\r\\n# Paste the following text or any css rule you want: \\\"\\\"\\\"\\n\\n<pre>\\r\\n.matched{background-color:yellow}\\r\\n.tw-context {\\r\\n  border:1px solid blue;\\r\\n  word-break: break-all; word-wrap: break-word;}\\r\\n</pre>\\r\\n\\\"\\\"\\\"\\r\\n# Tag it with `$:/tags/stylesheet`\\r\\n# Save the tiddler\"\n        }\n    }\n}",
            "version": "2.1.0",
            "type": "application/json",
            "title": "$:/plugins/danielo515/ContextPlugin",
            "tags": "$:/giffmex/stroll $:/giffmex/blinks",
            "source": "https://github.com/danielo515/TW5-contextPlugin",
            "revision": "0",
            "plugin-type": "plugin",
            "modified": "20200521150811242",
            "list": "readme",
            "description": "Context search - provides visual highlight of search results",
            "dependents": "",
            "created": "20200304200213285",
            "core-version": ">=5.1.0",
            "bag": "default",
            "author": "Danielo Rodrigez"
        }
    }
}